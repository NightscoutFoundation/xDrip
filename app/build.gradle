buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'
//apply plugin: 'io.fabric'

//def AAVersion = '4.3.1'
//dependencies {
//    annotationProcessor "org.androidannotations:androidannotations:$AAVersion"
//    implementation "org.androidannotations:androidannotations-api:$AAVersion"
//}


repositories {
    maven {
        url "https://maven.google.com"
    }
    maven { url 'https://maven.fabric.io/public' }
    maven {
        url "https://raw.github.com/embarkmobile/zxing-android-minimal/mvn-repo/maven-repository/"
    }
    maven {
        url "https://jitpack.io"
    }
    maven { url "https://oss.sonatype.org/content/groups/public/" }
    flatDir {
        dirs 'libs'
    }
}

def generateVersionNumber = { ->
    StringBuilder stringBuilder = new StringBuilder()
    stringBuilder.append((new Date()).format('yyMMddHHmm'))
    return Integer.parseInt(stringBuilder.toString())
}

def generateVersionNumberString = { ->
    StringBuilder stringBuilder = new StringBuilder()
    stringBuilder.append((new Date()).format('yyMMddHHmm'))
    return stringBuilder.toString()
}

def generateTimestamp = { ->
    StringBuilder stringBuilder = new StringBuilder()
    stringBuilder.append((new Date()).getTime())
    stringBuilder.append("L");
    return stringBuilder.toString()
}

def generateRandomUUID = { ->
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append('"' + UUID.randomUUID().toString() + '"')
    return stringBuilder.toString()
}

def generateVersionName = { ->

    StringBuilder stringBuilder = new StringBuilder()
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always'
            standardOutput = stdout
        }
        String commitObject = stdout.toString().trim()
        try {
            stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'describe', '--tags'
                standardOutput = stdout
            }
            //stringBuilder.append(stdout.toString().trim())
            //stringBuilder.append("-")
        } catch (ignored) {
            // no tags
        }

        stringBuilder.append(commitObject)
        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--show-toplevel'
            standardOutput = stdout
        }
        if (stdout.toString().trim().contains("xDrip-Experimental")) {
            stringBuilder.append("-experimental")
        }

        stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        String branch = stdout.toString().trim()
        if (!branch.equals("master")) {
            stringBuilder.append('-')
            stringBuilder.append(branch)
        }

    } catch (ignored) {
        return "NoGitSystemAvailable"
    }
    stringBuilder.append('-')
    stringBuilder.append((new Date()).format('yyyy.MM.dd'))
    return stringBuilder.toString()

}

android {
    compileSdkVersion 29

    dexOptions {
        javaMaxHeapSize "3g"
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    defaultConfig {
        applicationId "com.eveningoutpost.dexdrip"
        minSdkVersion 18
        // increasing target SDK version can cause compatibility issues with Android 7+
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 23
        // change versionCode only when downgrade should be prevented
        // eg, when data structures are incompatible
        versionCode 1603091400
        versionName generateVersionName()
        buildConfigField "int", "buildVersion", generateVersionNumberString()
        buildConfigField "String", "buildUUID", generateRandomUUID()
        buildConfigField "long", "buildTimestamp", generateTimestamp()
        buildConfigField "int", "targetSDK", targetSdkVersion.mApiLevel.toString()
        //vectorDrawables.useSupportLibrary = true // broken in newer gradle versions
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            testProguardFile 'proguard-debug.pro'
            multiDexKeepProguard file('proguard-debug.pro')
            ext.enableCrashlytics = false
            //      applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }
    }
}

// auto test rig
task AutoInstall(type: Exec) {
    commandLine "bash", "$projectDir/autoinstallviausb"
}

// auto tester
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        if (System.getenv('USERDOMAIN') == "PC-PC") {
            task.finalizedBy 'AutoTestRig'
            AutoTestRig.outputs.upToDateWhen { false }
        }
    }
}

task AutoTestRig()  {
    dependsOn(AutoInstall)
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    wearApp project(':wear')
    //weapApp files('../wear/build/outputs/apk/wear_release.apk')
    //testimplementation 'com.squareup.okhttp:mockwebserver:2.5.0'
    implementation('com.github.nightscout:android-uploader:CORE_FOR_XDRIP') {
        transitive = false
    }

    implementation project(':localeapi')
    //implementation 'com.nispok:snackbar:2.10.8'


    // use specific version of data binding until google resolves the bugs with mixed case package names
    //noinspection GradleDependency
    implementation 'com.android.databinding:adapters:3.1.4'
    //noinspection GradleDependency
    implementation 'com.android.databinding:library:3.1.4'
    //noinspection GradleDependency
    implementation 'com.android.databinding:baseLibrary:3.1.4'
    //////

    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:support-v13:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support:preference-v7:26.1.0'
    //implementation 'com.google.android.gms:play-services-drive:9.4.0'
    implementation 'com.google.firebase:firebase-messaging:10.2.1'
    implementation 'com.google.android.gms:play-services-maps:10.2.1'
    implementation 'com.google.android.gms:play-services-wearable:10.2.1'
    implementation 'com.google.android.gms:play-services-location:10.2.1'
    implementation "com.google.android.gms:play-services-gcm:10.2.1"
    implementation 'com.squareup.wire:wire-runtime:2.2.0'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    //implementation 'com.jakewharton.retrofit:retrofit1-okhttp3-client:1.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'
    implementation 'com.squareup.moshi:moshi:1.9.2'
    //implementation 'org.influxdb:influxdb-java:2.6'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
    implementation 'com.getpebble:pebblekit:3.1.0'
    implementation 'com.github.jamorham:amazfitcommunication:master-SNAPSHOT'
    implementation 'io.reactivex:rxjava:1.3.3'
    implementation 'com.activeandroid:thread-safe-active-android:3.1.1'
    //implementation 'com.github.lecho:hellocharts-android:v1.5.8'
    implementation "com.polidea.rxandroidble2:rxandroidble:1.11.0"
    implementation 'com.google.guava:guava:24.1-android'
    implementation 'com.embarkmobile:zxing-android-minimal:2.0.0@aar'
    implementation 'com.embarkmobile:zxing-android-integration:2.0.0@aar'
    //implementation 'com.embarkmobile:zxing-android-legacy:2.0.0@aar'
    implementation 'com.google.zxing:core:3.1.0'
    implementation 'net.tribe7.seeds:seeds-functional:16.0.1'
    implementation 'net.tribe7.seeds:seeds-primitives:16.0.1'
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter:2.2.0'
    implementation 'me.tatarka.bindingcollectionadapter2:bindingcollectionadapter-recyclerview:2.2.0'
    implementation 'org.slf4j:slf4j-api:1.7.7'
    implementation 'org.apache.commons:commons-math3:3.6'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
        transitive = true
    }
    implementation 'uk.com.robust-it:cloning:1.9.5'
    implementation 'com.github.amlcurran.showcaseview:library:5.4.3'
    // implementation 'com.itextpdf:itextg:5.5.9'

    // Pebble-Trend, needs to be checked if really needed
    //implementation 'com.android.support:multidex:1.0.1'
    implementation 'ar.com.hjg:pngj:2.1.0'
    //implementation 'com.bugfender.sdk:android:0.+'
    // implementation 'com.rarepebble:colorpicker:1.7.0'
    implementation(name: 'colorpicker', ext: 'aar')
    implementation(name: 'hellocharts-library-release', ext: 'aar')
    implementation(name: 'search-preference', ext: 'aar')
    implementation 'org.apache.commons:commons-text:1.3'
    implementation 'com.google.dagger:dagger:2.25.4'
    implementation "com.evernote:android-job:1.2.6"
    implementation 'com.android.support:multidex:1.0.3'
    //implementation 'com.google.dagger:dagger-android-support:2.x' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-compiler:2.25.4'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.objenesis:objenesis:2.5.1'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation "org.robolectric:robolectric:4.2.1"
    testImplementation "com.google.truth:truth:0.39"

    testImplementation 'org.mockito:mockito-core:2.4.0'
    testImplementation 'org.powermock:powermock-core:1.7.1'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.1'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.1'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.7.1'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.1'


    androidTestImplementation('com.schibsted.spain:barista:1.7.0') {
        exclude group: 'com.android.support'
    }
    // espresso, workarounds needed for correct functioning
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'com.android.support.test:runner:1.0.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.1'
    // add this for intent mocking support
    //androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.1'
    // add this for webview testing support
    //androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.1'

    // you will want to install the android studio lombok plugin
    compileOnly 'org.projectlombok:lombok:1.18.10'
    //  compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    annotationProcessor "org.projectlombok:lombok:1.18.10"

    // use lombok in unit tests
    testCompileOnly 'org.projectlombok:lombok:1.18.10'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'
}

tasks.withType(Test) { 
  testLogging {
    exceptionFormat "full"
    events "started", "skipped", "passed", "failed"
    showStandardStreams true
  }
}

apply plugin: 'com.google.gms.google-services'
